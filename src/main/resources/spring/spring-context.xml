<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
	<!-- 启动自动扫描机制 -->
	<context:component-scan base-package="com.situ.eoa">
		<!-- Controller层实例的生成 交给SpringMVC去处理 -->
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	<!-- 配置数据源 -->
	<context:property-placeholder location="classpath:jdbc.properties" />
	<!-- 定义数据源Bean,使用C3P0数据源实现 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<!-- 指定连接数据库的驱动 -->
		<property name="driverClass" value="${db.driverClass}" />
		<!-- 指定连接数据库的URL -->
		<property name="jdbcUrl" value="${db.jdbcUrl}" />
		<!-- 指定连接数据库的用户名 -->
		<property name="user" value="${db.username}" />
		<!-- 指定连接数据库的密码 -->
		<property name="password" value="${db.password}" />
		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize" value="${pool.maxActive}" />
		<!-- 指定连接数据库连接池的最小连接数 -->
		<property name="minPoolSize" value="${pool.minIdle}" />
		<!-- 指定连接数据库连接池的初始化连接数 取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize" value="${pool.initialSize}" />
		<!--最大空闲时间,25000秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime" value="25000" />
		<!--如果设为true那么在取得连接的同时将校验连接的有效性。Default: false -->
		<property name="testConnectionOnCheckin" value="true" />
		<!--每18000秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod" value="18000" />
	</bean>
	<!-- 让Spring容器 生成 sqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 将数据源 注入进来 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 配置需要生成别名的类的包名，会去进行扫描，并生成别名。 -->
		<property name="typeAliasesPackage" value="com.situ.eoa" />
		<!-- 配置Mybatis的配置文件 -->
		<property name="configLocation" value="classpath:mybatis/mybaits-config.xml" />
		<!-- 配置Mybatis的映射文件 -->
		<property name="mapperLocations" value="classpath:mybatis/mappers/*-mapper.xml" />
	</bean>

	<!-- 使用 MapperScannerConfigurer,将 会 查 找 类 路 径 下 的 映 射 器 并 自 动 将 它 们 创 建 成 MapperFactoryBean -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 配置要Scanner的基本包名 -->
		<property name="basePackage" value="com.situ.eoa" />
		<!-- 配置要处理的annotation -->
		<property name="annotationClass" value="org.springframework.stereotype.Repository" />
	</bean>

</beans>